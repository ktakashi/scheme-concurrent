#!read-macro=sagittarius/regex
(import (rnrs)
	(sagittarius)
	(sagittarius regex)
	(match)
	(pp)
	(srfi :1)
	(util file))

(define (create-directory-of-file file)
  (let-values (((path base ext) (decompose-path file)))
    (create-directory* path)))

(define (->r7rs-file file)
  (cond ((#/src\/(.+)?/ file) =>
	 (lambda (m)
	   (let ((f (m 1)))
	     (string-append "src-r7rs/" (path-sans-extension f) ".sld"))))
	(else (error '->r7rs-file "unknown error"))))

(define (->r7rs-import name imports)
  (define (normalize import)
    (map (lambda (part)
	   (cond ((equal? part '(rnrs)) 
		  '(except (scheme base) define-record-type))
		 ((pair? part) (normalize part))
		 (else
		  (let ((s (symbol->string part)))
		    (if (char=? (string-ref s 0) #\:)
			(string->number (string-copy s 1))
			part)))))
	 import))
  (let loop ((imports imports) (r '()))
    (cond ((null? imports) 
	   (reverse! (cons (append name '(compat)) r)))
	  ((equal? (car imports) '(rnrs))
	   (loop (cdr imports) 
		 (cons '(except (scheme base) define-record-type) r)))
	  ((equal? (car imports) '(rnrs mutable-pairs))
	   (loop (cdr imports) r))
	  (else (loop (cdr imports) (cons (normalize (car imports)) r))))))

(define (strip-record&condition body)
  (partition (lambda (e)
	       (or (eq? (car e) 'define-record-type)
		   (eq? (car e) 'define-condition-type)
		   (match e
		     (('define ('simple-invoke . args) . rest) #t)
		     (('define ('default-error-handler . args) . rest) #t)
		     (('define ('make-executor 'idlings . args) . rest) #t)
		     (('define '*thread-pool-current-thread-id* . rest) #t)
		     (('define ('not-started . args) . rest) #t)
		     (('define ('abort-rejected-handler . args) . rest) #t)
		     (('define 'default-rejected-handler . rest) #t)
		     (('define 'shared-box-mark . rest) #t)
		     (('define ('shared-box-put! . args) . rest) #t)
		     (('define ('shared-box-get! . args) . rest) #t)
		     (_ #f)))) body))

;; this file must be manually modified...
(define (write-r7rs-compat r&c) (pp r&c (current-error-port)))

(define (main args)
  (let ((files (glob "src/**/*.sls")))
    (write-r7rs-compat
     (map (lambda (file)
	    (match (call-with-input-file file read)
	      (('library name 
		   ('export exports ...)
		   ('import imports ...)
		 body ...)
	       (let ((ofile (->r7rs-file file)))
		 (when (file-exists? ofile) (delete-file ofile))
		 (create-directory-of-file ofile)
		 (call-with-output-file ofile
		   (lambda (out)
		     (display ";; -*- mode:scheme; coding: utf-8; -*-" out)
		     (newline out)
		     (display ";; Automatically generated. DON'T EDIT!" out)
		     (newline out)
		     (let-values (((r&c b) (strip-record&condition body)))
		       (pp (if (equal? name '(util concurrent))
			       `(define-library ,name
				  (export ,@exports)
				  (import (util concurrent shared-queue)
					  (util concurrent thread-pool)
					  (util concurrent future)
					  (util concurrent executor)))
			       `(define-library ,name
				  (export ,@exports)
				  (import ,@(->r7rs-import name imports))
				  (begin ,@b)))
			   out)
		       (cons name r&c))))))))
	  files))))
